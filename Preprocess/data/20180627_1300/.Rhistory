head(met_HF)
met_HF$TIMESTAMP
which(met_HF$TIMESTAMP==next_interval)
sessiondata$timestamp
next_interval
which(next_interval == met_HF$TIMESTAMP)
met_HF$TIMESTAMP == next_interval
met_HF$bar
metHF$bar [next_interval == met_HF$TIMESTAMP]
met_HF$bar [next_interval == met_HF$TIMESTAMP]
next_interval <- as.POSIXct (x = (round (as.numeric (median (sessiondata$timestamp [ifile]))/
(15 * 60)) * (15 * 60) + (15 * 60)), format = '%Y-%m-%d %H:%M:%S',
origin = as.POSIXct ("1970-01-01", format = '%Y-%m-%d', tz = 'UTC'),
tz = 'EST')
next_interval
met_HF$TIMESTAMP = next_interval
met_HF$TIMESTAMP
pres.Pa <- met_HF$bar  [met_HF$TIMESTAMP == next_interval] * 100.0 # Pa
airt.C  <- met_HF$airt [met_HF$TIMESTAMP == next_interval]         # deg C
rh.per  <- met_HF$rh   [met_HF$TIMESTAMP == next_interval]         # %
pres.Pa
# Calculate saturation water vapour pressure (esat) to convert relative humidity
es.Pa <- 0.61078 * exp ((17.269 * airt.C) / (237.3 + airt.C)) * 1000 # saturated water pressure [Pa]
ea.Pa <- es.Pa * rh.per / 100.0                                         # get actual water vapour pressure [Pa]
dat$ea.Pa   <- rep (ea.Pa,   length (dat [, 1]))   # add actual water vapour pressure [Pa] to sessiondata data.frame
dat$airt.C  <- rep (airt.C,  length (dat [, 1]))   # add air temperature [degC] to sessiondata data.frame
dat$pres.Pa <- rep (pres.Pa, length (dat [, 1]))   # add atmospheric pressure [Pa] to aalldat data.frame
dat$H2O.ppt <- dat$ea.Pa / (dat$pres.Pa - dat$ea.Pa) * 1.0e3   # add actual water vapour pressure [ppt] to sessiondata data.frame
names(dat)[which(names(dat)=="CO2")]<-"CO2.ppm"
# Correct CO2 concentration for water vapour
dat$CO2.dry <- corrConcDilution (dat,
colConc   = 'CO2.ppm',
colVapour = 'H2O.ppt')
resFit <- calcClosedChamberFlux (dat,
colConc     = 'CO2.dry',
colTime     = 'RunTime', # redundant
colTemp     = 'airt.C',
colPressure = 'pres.Pa',
volume      = dimensions$vol_m3[ifile],
area        = dimensions$respArea_m2[ifile])
fluxdata[[ifile]]<-resFit
sessiondata$flux[ifile]<-resFit$flux
sessiondata$sdFlux[ifile]<-resFit$sdFlux
sessiondata$ea.Pa[ifile]   <- ea.Pa   # add actual water vapour pressure [Pa] to alldata data.frame
sessiondata$airt.C[ifile]  <- airt.C   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa[ifile] <- pres.Pa   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt[ifile] <- ea.Pa / (pres.Pa - ea.Pa) * 1.0e3
#pdf("InitialRespiration.pdf")
# use a 'for loop', assigning "i" to represent each of the files in sessiondata 1 through "nrow", meaning all the rows
# Loop through flux puppy files
for (ifile in  1:nrow(sessiondata)){ #the curly bracket starts the loop
#assign each of the files to a general variable "currentfile"
currentfile<-sessiondata$file[ifile]
# read in the data file, and assign it to another generable variable "measurement"
measurement<- read.csv(file = currentfile, header = TRUE, dec = ".")
dat <- selectData (ds= measurement,
lowerBound = lowerbound[ifile],
upperBound = upperbound[ifile])
title(main = paste("Soil Respiration:",'tree',sessiondata$tree[ifile],'chamber',sessiondata$chamber[ifile],sessiondata$timestamp[ifile]))
# to determine which weather measurements to use, we'll find 15 minute interval (consecutive; 12:29 = 12:30, 12:31=12:45)
next_interval <- as.POSIXct (x = (round (as.numeric (median (sessiondata$timestamp [ifile]))/
(15 * 60)) * (15 * 60) + (15 * 60)), format = '%Y-%m-%d %H:%M:%S',
origin = as.POSIXct ("1970-01-01", format = '%Y-%m-%d', tz = 'UTC'),
tz = 'EST')
fluxdata=list()
sessiondata$flux<-NA
sessiondata$sdFlux<-NA
sessiondata$ea.Pa   <- NA   # add actual water vapour pressure [Pa] to alldata data.frame (blank columns)
sessiondata$airt.C  <- NA   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa <- NA   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt <- NA   # add actual water vapour pressure [ppt] to alldata data.frame
pres.Pa <- met_HF$bar  [met_HF$TIMESTAMP == next_interval] * 100.0 # Pa
airt.C  <- met_HF$airt [met_HF$TIMESTAMP == next_interval]         # deg C
rh.per  <- met_HF$rh   [met_HF$TIMESTAMP == next_interval]         # %
# Calculate saturation water vapour pressure (esat) to convert relative humidity
es.Pa <- 0.61078 * exp ((17.269 * airt.C) / (237.3 + airt.C)) * 1000 # saturated water pressure [Pa]
ea.Pa <- es.Pa * rh.per / 100.0                                         # get actual water vapour pressure [Pa]
dat$ea.Pa   <- rep (ea.Pa,   length (dat [, 1]))   # add actual water vapour pressure [Pa] to sessiondata data.frame
dat$airt.C  <- rep (airt.C,  length (dat [, 1]))   # add air temperature [degC] to sessiondata data.frame
dat$pres.Pa <- rep (pres.Pa, length (dat [, 1]))   # add atmospheric pressure [Pa] to aalldat data.frame
dat$H2O.ppt <- dat$ea.Pa / (dat$pres.Pa - dat$ea.Pa) * 1.0e3   # add actual water vapour pressure [ppt] to sessiondata data.frame
names(dat)[which(names(dat)=="CO2")]<-"CO2.ppm"
# Correct CO2 concentration for water vapour
dat$CO2.dry <- corrConcDilution (dat,
colConc   = 'CO2.ppm',
colVapour = 'H2O.ppt')
# Calculate chamber flux for entire timeseries
resFit <- calcClosedChamberFlux (dat,
colConc     = 'CO2.dry',
colTime     = 'RunTime', # redundant
colTemp     = 'airt.C',
colPressure = 'pres.Pa',
volume      = dimensions$vol_m3[ifile],
area        = dimensions$respArea_m2[ifile])
fluxdata[[ifile]]<-resFit
sessiondata$flux[ifile]<-resFit$flux
sessiondata$sdFlux[ifile]<-resFit$sdFlux
sessiondata$ea.Pa[ifile]   <- ea.Pa   # add actual water vapour pressure [Pa] to alldata data.frame
sessiondata$airt.C[ifile]  <- airt.C   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa[ifile] <- pres.Pa   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt[ifile] <- ea.Pa / (pres.Pa - ea.Pa) * 1.0e3
}
#what session do you want to look at?
#--------------------------------------------------------------------------------------#
date_time <- "20180627_1300"
#load source preprocess data (including chamber volume and bounds, plotting function)
#--------------------------------------------------------------------------------------#
path<-"~/Documents/GitHub/Resp2018"
setwd(path)
source('Plots_chooseBounds.R')
length(myfiles)
ifile = 80
ifile
currentfile<-sessiondata$file[ifile]
currentfile
# read in the data file, and assign it to another generable variable "measurement"
measurement<- read.csv(file = currentfile, header = TRUE, dec = ".")
dat <- selectData (ds= measurement,
lowerBound = lowerbound[ifile],
upperBound = upperbound[ifile])
upperbound[ifile]
lowerbound
date_time
bounds$TIMESTAMP
myfiles
myfiles<- myfiles(pattern="G-SoilResp2018*")
myfiles<- myfiles[pattern="G-SoilResp2018*"]
myfiles
myfiles["G-SoilResp2018*"]
myfiles<- myfiles[46:85]
myfiles
substring(myfiles,46,85)
#what session do you want to look at?
#--------------------------------------------------------------------------------------#
date_time <- "20180627_1300"
#load source preprocess data (including chamber volume and bounds, plotting function)
#--------------------------------------------------------------------------------------#
path<-"~/Documents/GitHub/Resp2018"
setwd(path)
source('Plots_chooseBounds.R')
myfiles
substring(myfiles,46,85)
list(myfiles,46,85)
myfiles[1]
myfiles[46]
myfiles[45:85]
myfiles[46:85]
myfiles<- myfiles[46:85]
#Loop through each measurement in the session
#--------------------------------------------------------------------------------------#
#pdf("InitialRespiration.pdf")
for (ifile in  1:nrow(myfiles)){ #the curly bracket starts the loop
#assign each of the files to a general variable "currentfile"
currentfile<-sessiondata$file[ifile]
# read in the data file, and assign it to another generable variable "measurement"
measurement<- read.csv(file = currentfile, header = TRUE, dec = ".")
dat <- selectData (ds= measurement,
lowerBound = lowerbound[ifile],
upperBound = upperbound[ifile])
title(main = paste("Soil Respiration:",'tree',sessiondata$tree[ifile],'chamber',sessiondata$chamber[ifile],sessiondata$timestamp[ifile]))
# to determine which weather measurements to use, we'll find 15 minute interval (consecutive; 12:29 = 12:30, 12:31=12:45)
next_interval <- as.POSIXct (x = (round (as.numeric (median (sessiondata$timestamp [ifile]))/
(15 * 60)) * (15 * 60) + (15 * 60)), format = '%Y-%m-%d %H:%M:%S',
origin = as.POSIXct ("1970-01-01", format = '%Y-%m-%d', tz = 'UTC'),
tz = 'EST')
fluxdata=list()
sessiondata$flux<-NA
sessiondata$sdFlux<-NA
sessiondata$ea.Pa   <- NA   # add actual water vapour pressure [Pa] to alldata data.frame (blank columns)
sessiondata$airt.C  <- NA   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa <- NA   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt <- NA   # add actual water vapour pressure [ppt] to alldata data.frame
pres.Pa <- met_HF$bar  [met_HF$TIMESTAMP == next_interval] * 100.0 # Pa
airt.C  <- met_HF$airt [met_HF$TIMESTAMP == next_interval]         # deg C
rh.per  <- met_HF$rh   [met_HF$TIMESTAMP == next_interval]         # %
# Calculate saturation water vapour pressure (esat) to convert relative humidity
es.Pa <- 0.61078 * exp ((17.269 * airt.C) / (237.3 + airt.C)) * 1000 # saturated water pressure [Pa]
ea.Pa <- es.Pa * rh.per / 100.0                                         # get actual water vapour pressure [Pa]
dat$ea.Pa   <- rep (ea.Pa,   length (dat [, 1]))   # add actual water vapour pressure [Pa] to sessiondata data.frame
dat$airt.C  <- rep (airt.C,  length (dat [, 1]))   # add air temperature [degC] to sessiondata data.frame
dat$pres.Pa <- rep (pres.Pa, length (dat [, 1]))   # add atmospheric pressure [Pa] to aalldat data.frame
dat$H2O.ppt <- dat$ea.Pa / (dat$pres.Pa - dat$ea.Pa) * 1.0e3   # add actual water vapour pressure [ppt] to sessiondata data.frame
names(dat)[which(names(dat)=="CO2")]<-"CO2.ppm"
# Correct CO2 concentration for water vapour
dat$CO2.dry <- corrConcDilution (dat,
colConc   = 'CO2.ppm',
colVapour = 'H2O.ppt')
# Calculate chamber flux for entire timeseries
resFit <- calcClosedChamberFlux (dat,
colConc     = 'CO2.dry',
colTime     = 'RunTime', # redundant
colTemp     = 'airt.C',
colPressure = 'pres.Pa',
volume      = dimensions$vol_m3[ifile],
area        = dimensions$respArea_m2[ifile])
fluxdata[[ifile]]<-resFit
sessiondata$flux[ifile]<-resFit$flux
sessiondata$sdFlux[ifile]<-resFit$sdFlux
sessiondata$ea.Pa[ifile]   <- ea.Pa   # add actual water vapour pressure [Pa] to alldata data.frame
sessiondata$airt.C[ifile]  <- airt.C   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa[ifile] <- pres.Pa   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt[ifile] <- ea.Pa / (pres.Pa - ea.Pa) * 1.0e3
}
#load source preprocess data (including chamber volume and bounds, plotting function)
#--------------------------------------------------------------------------------------#
require(segmented); require(tibble)
#load source preprocess data (including chamber volume and bounds, plotting function)
#--------------------------------------------------------------------------------------#
require(segmented); require(tibble)
path<-"~/Documents/GitHub/Resp2018"
setwd(path); source('readdata.R')
#install and load necessary packages
require(segmented); require(tibble)
# add the library 'RespChamberProc' package by sourcing
setwd ('/Users/bdavis/Documents/HF REU/My Project/RespChamberProc/')
fileNames <- list.files (pattern = "*.R") [-c (9:10)]
res <- sapply (fileNames, source); rm (res)
#LOWER AND UPPERBOUNDS
setwd("~/Documents/HF REU/My Project/48HR")
bounds<-read.csv(file = 'SoilResp2018_UpperLower.csv', header = TRUE)
lowerbound<-bounds[bounds$TIMESTAMP==date_time,seq(2,ncol(bounds),2)]
#what session do you want to look at?
#--------------------------------------------------------------------------------------#
date_time <- "20180627_1300"
#load source preprocess data (including chamber volume and bounds, plotting function)
#--------------------------------------------------------------------------------------#
require(segmented); require(tibble)
path<-"~/Documents/GitHub/Resp2018"
setwd(path); source('readdata.R')
path <- paste("~/Documents/HF REU/My Project/48HR/",date_time, sep='')
setwd(path)
myfiles<-list.files(getwd(),"csv")
myfiles
myfiles<-myfiles[substring(myfiles,1,14)=="G-SoilResp2018"]
myfiles
sessiondata
tree<- as.numeric(substring(myfile,16,17))
tree<- as.numeric(substring(myfiles,16,17))
chamber<- as.numeric(substring(myfiles,19,19))
avgh_cm<- soilH$havg_cm [soilH$chamber == chamber & soilH$tree == tree]
radius<- 0.1016
chamberGeometry <- calcChamberGeometryCylinder (radius = radius,
height = avgh_cm, #heights need to vary
taper  = 1.0)
treatment<-rep("chilling",length(tree)) #name them all 'chilling'
treatment[tree<=10]<-"compress"
treatment[tree<=5]<-"control" #name any tree less than or equal to 5 'control'
tmp<-unlist(strsplit(myfiles,'_'))
datestr<-tmp[seq(3,length(tmp),4)]
timestr<-tmp[seq(4,length(tmp),4)]
timestr<-substring(timestr,1,nchar(timestr)-4)
#change the date and time format
timestamp<-strptime(paste(datestr,timestr),"%Y%m%d %H%M%S")
#this samplying date will be used to extract the meteoroligical data
samplingDate  <- as.POSIXct (datestr[1], format = '%Y%m%d')
#put all of that together into a data frame, seperating all the elements into columns
#--------------------------------------------------------------------------------------#
sessiondata<-data.frame(file=myfiles,
treatment=treatment,
tree=tree,
chamber=chamber,
timestamp=timestamp,
stringsAsFactors = FALSE)
#assign each of the files to a general variable "currentfile"
currentfile<-sessiondata$file[ifile]
#Loop through each measurement in the session
#--------------------------------------------------------------------------------------#
#pdf("InitialRespiration.pdf")
for (ifile in  1:nrow(sessiondata)){ #the curly bracket starts the loop
#assign each of the files to a general variable "currentfile"
currentfile<-sessiondata$file[ifile]
# read in the data file, and assign it to another generable variable "measurement"
measurement<- read.csv(file = currentfile, header = TRUE, dec = ".")
dat <- selectData (ds= measurement,
lowerBound = lowerbound[ifile],
upperBound = upperbound[ifile])
title(main = paste("Soil Respiration:",'tree',sessiondata$tree[ifile],'chamber',sessiondata$chamber[ifile],sessiondata$timestamp[ifile]))
# to determine which weather measurements to use, we'll find 15 minute interval (consecutive; 12:29 = 12:30, 12:31=12:45)
next_interval <- as.POSIXct (x = (round (as.numeric (median (sessiondata$timestamp [ifile]))/
(15 * 60)) * (15 * 60) + (15 * 60)), format = '%Y-%m-%d %H:%M:%S',
origin = as.POSIXct ("1970-01-01", format = '%Y-%m-%d', tz = 'UTC'),
tz = 'EST')
fluxdata=list()
sessiondata$flux<-NA
sessiondata$sdFlux<-NA
sessiondata$ea.Pa   <- NA   # add actual water vapour pressure [Pa] to alldata data.frame (blank columns)
sessiondata$airt.C  <- NA   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa <- NA   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt <- NA   # add actual water vapour pressure [ppt] to alldata data.frame
pres.Pa <- met_HF$bar  [met_HF$TIMESTAMP == next_interval] * 100.0 # Pa
airt.C  <- met_HF$airt [met_HF$TIMESTAMP == next_interval]         # deg C
rh.per  <- met_HF$rh   [met_HF$TIMESTAMP == next_interval]         # %
# Calculate saturation water vapour pressure (esat) to convert relative humidity
es.Pa <- 0.61078 * exp ((17.269 * airt.C) / (237.3 + airt.C)) * 1000 # saturated water pressure [Pa]
ea.Pa <- es.Pa * rh.per / 100.0                                         # get actual water vapour pressure [Pa]
dat$ea.Pa   <- rep (ea.Pa,   length (dat [, 1]))   # add actual water vapour pressure [Pa] to sessiondata data.frame
dat$airt.C  <- rep (airt.C,  length (dat [, 1]))   # add air temperature [degC] to sessiondata data.frame
dat$pres.Pa <- rep (pres.Pa, length (dat [, 1]))   # add atmospheric pressure [Pa] to aalldat data.frame
dat$H2O.ppt <- dat$ea.Pa / (dat$pres.Pa - dat$ea.Pa) * 1.0e3   # add actual water vapour pressure [ppt] to sessiondata data.frame
names(dat)[which(names(dat)=="CO2")]<-"CO2.ppm"
# Correct CO2 concentration for water vapour
dat$CO2.dry <- corrConcDilution (dat,
colConc   = 'CO2.ppm',
colVapour = 'H2O.ppt')
# Calculate chamber flux for entire timeseries
resFit <- calcClosedChamberFlux (dat,
colConc     = 'CO2.dry',
colTime     = 'RunTime', # redundant
colTemp     = 'airt.C',
colPressure = 'pres.Pa',
volume      = dimensions$vol_m3[ifile],
area        = dimensions$respArea_m2[ifile])
fluxdata[[ifile]]<-resFit
sessiondata$flux[ifile]<-resFit$flux
sessiondata$sdFlux[ifile]<-resFit$sdFlux
sessiondata$ea.Pa[ifile]   <- ea.Pa   # add actual water vapour pressure [Pa] to alldata data.frame
sessiondata$airt.C[ifile]  <- airt.C   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa[ifile] <- pres.Pa   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt[ifile] <- ea.Pa / (pres.Pa - ea.Pa) * 1.0e3
}
# Pull appropriate meterological data from the HF website to account for those factors
#--------------------------------------------------------------------------------------#
weatherdate<-paste(substring(datestr[1],1,4),substring(datestr[1],5,6),'01',sep='-')
if (samplingDate < as.POSIXct (weatherdate, format = '%Y-%m-%d')) {
met_HF <- read.csv (file = url ('http://harvardforest.fas.harvard.edu/sites/harvardforest.fas.harvard.edu/files/data/p00/hf001/hf001-10-15min-m.csv'))
} else if (samplingDate >= as.POSIXct ('2018-06-01', format = '%Y-%m-%d')) {
met_HF <- read.csv (file = url ('http://harvardforest.fas.harvard.edu/sites/harvardforest.fas.harvard.edu/files/weather/qfm.csv'))
}
met_HF$TIMESTAMP <- as.POSIXct (met_HF$datetime,
format = '%Y-%m-%dT%H:%M',
tz = 'EST')
#Loop through each measurement in the session
#--------------------------------------------------------------------------------------#
#pdf("InitialRespiration.pdf")
for (ifile in  1:nrow(sessiondata)){ #the curly bracket starts the loop
#assign each of the files to a general variable "currentfile"
currentfile<-sessiondata$file[ifile]
# read in the data file, and assign it to another generable variable "measurement"
measurement<- read.csv(file = currentfile, header = TRUE, dec = ".")
dat <- selectData (ds= measurement,
lowerBound = lowerbound[ifile],
upperBound = upperbound[ifile])
title(main = paste("Soil Respiration:",'tree',sessiondata$tree[ifile],'chamber',sessiondata$chamber[ifile],sessiondata$timestamp[ifile]))
# to determine which weather measurements to use, we'll find 15 minute interval (consecutive; 12:29 = 12:30, 12:31=12:45)
next_interval <- as.POSIXct (x = (round (as.numeric (median (sessiondata$timestamp [ifile]))/
(15 * 60)) * (15 * 60) + (15 * 60)), format = '%Y-%m-%d %H:%M:%S',
origin = as.POSIXct ("1970-01-01", format = '%Y-%m-%d', tz = 'UTC'),
tz = 'EST')
fluxdata=list()
sessiondata$flux<-NA
sessiondata$sdFlux<-NA
sessiondata$ea.Pa   <- NA   # add actual water vapour pressure [Pa] to alldata data.frame (blank columns)
sessiondata$airt.C  <- NA   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa <- NA   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt <- NA   # add actual water vapour pressure [ppt] to alldata data.frame
pres.Pa <- met_HF$bar  [met_HF$TIMESTAMP == next_interval] * 100.0 # Pa
airt.C  <- met_HF$airt [met_HF$TIMESTAMP == next_interval]         # deg C
rh.per  <- met_HF$rh   [met_HF$TIMESTAMP == next_interval]         # %
# Calculate saturation water vapour pressure (esat) to convert relative humidity
es.Pa <- 0.61078 * exp ((17.269 * airt.C) / (237.3 + airt.C)) * 1000 # saturated water pressure [Pa]
ea.Pa <- es.Pa * rh.per / 100.0                                         # get actual water vapour pressure [Pa]
dat$ea.Pa   <- rep (ea.Pa,   length (dat [, 1]))   # add actual water vapour pressure [Pa] to sessiondata data.frame
dat$airt.C  <- rep (airt.C,  length (dat [, 1]))   # add air temperature [degC] to sessiondata data.frame
dat$pres.Pa <- rep (pres.Pa, length (dat [, 1]))   # add atmospheric pressure [Pa] to aalldat data.frame
dat$H2O.ppt <- dat$ea.Pa / (dat$pres.Pa - dat$ea.Pa) * 1.0e3   # add actual water vapour pressure [ppt] to sessiondata data.frame
names(dat)[which(names(dat)=="CO2")]<-"CO2.ppm"
# Correct CO2 concentration for water vapour
dat$CO2.dry <- corrConcDilution (dat,
colConc   = 'CO2.ppm',
colVapour = 'H2O.ppt')
# Calculate chamber flux for entire timeseries
resFit <- calcClosedChamberFlux (dat,
colConc     = 'CO2.dry',
colTime     = 'RunTime', # redundant
colTemp     = 'airt.C',
colPressure = 'pres.Pa',
volume      = dimensions$vol_m3[ifile],
area        = dimensions$respArea_m2[ifile])
fluxdata[[ifile]]<-resFit
sessiondata$flux[ifile]<-resFit$flux
sessiondata$sdFlux[ifile]<-resFit$sdFlux
sessiondata$ea.Pa[ifile]   <- ea.Pa   # add actual water vapour pressure [Pa] to alldata data.frame
sessiondata$airt.C[ifile]  <- airt.C   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa[ifile] <- pres.Pa   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt[ifile] <- ea.Pa / (pres.Pa - ea.Pa) * 1.0e3
}
ea.Pa
0.61078 * exp ((17.269 * airt.C) / (237.3 + airt.C)) * 1000
airt.C
met_HF$airt [met_HF$TIMESTAMP == next_interval]
met_HF$TIMESTAMP == next_interval
resFit <- calcClosedChamberFlux (dat,
colConc     = 'CO2.dry',
colTime     = 'RunTime', # redundant
colTemp     = 'airt.C',
colPressure = 'pres.Pa',
volume      = dimensions$vol_m3[ifile],
area        = dimensions$respArea_m2[ifile])
fluxdata[[ifile]]<-resFit
sessiondata$flux[ifile]<-resFit$flux
sessiondata$sdFlux[ifile]<-resFit$sdFlux
sessiondata$ea.Pa[ifile]   <- ea.Pa   # add actual water vapour pressure [Pa] to alldata data.frame
sessiondata$airt.C[ifile]  <- airt.C   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa[ifile] <- pres.Pa   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt[ifile] <- ea.Pa / (pres.Pa - ea.Pa) * 1.0e3
#this script will plot upper/lower bounds & calculate the flux (resp rate) of ea. chamber
#what session do you want to look at?
#--------------------------------------------------------------------------------------#
date_time <- "20180627_1300"
#load source preprocess data (including chamber volume and bounds, plotting function)
#--------------------------------------------------------------------------------------#
require(segmented); require(tibble)
path<-"~/Documents/GitHub/Resp2018"
setwd(path); source('readdata.R')
path <- paste("~/Documents/HF REU/My Project/48HR/",date_time, sep='')
setwd(path)
myfiles<-list.files(getwd(),"csv")
myfiles<-myfiles[substring(myfiles,1,14)=="G-SoilResp2018"]
tree<- as.numeric(substring(myfiles,16,17))
chamber<- as.numeric(substring(myfiles,19,19))
avgh_cm<- soilH$havg_cm [soilH$chamber == chamber & soilH$tree == tree]
radius<- 0.1016
chamberGeometry <- calcChamberGeometryCylinder (radius = radius,
height = avgh_cm, #heights need to vary
taper  = 1.0)
treatment<-rep("chilling",length(tree)) #name them all 'chilling'
treatment[tree<=10]<-"compress"
treatment[tree<=5]<-"control" #name any tree less than or equal to 5 'control'
tmp<-unlist(strsplit(myfiles,'_'))
datestr<-tmp[seq(3,length(tmp),4)]
timestr<-tmp[seq(4,length(tmp),4)]
timestr<-substring(timestr,1,nchar(timestr)-4)
#change the date and time format
timestamp<-strptime(paste(datestr,timestr),"%Y%m%d %H%M%S")
#this samplying date will be used to extract the meteoroligical data
samplingDate  <- as.POSIXct (datestr[1], format = '%Y%m%d')
#put all of that together into a data frame, seperating all the elements into columns
#--------------------------------------------------------------------------------------#
sessiondata<-data.frame(file=myfiles,
treatment=treatment,
tree=tree,
chamber=chamber,
timestamp=timestamp,
stringsAsFactors = FALSE)
# Pull appropriate meterological data from the HF website to account for those factors
#--------------------------------------------------------------------------------------#
weatherdate<-paste(substring(datestr[1],1,4),substring(datestr[1],5,6),'01',sep='-')
if (samplingDate < as.POSIXct (weatherdate, format = '%Y-%m-%d')) {
met_HF <- read.csv (file = url ('http://harvardforest.fas.harvard.edu/sites/harvardforest.fas.harvard.edu/files/data/p00/hf001/hf001-10-15min-m.csv'))
} else if (samplingDate >= as.POSIXct ('2018-06-01', format = '%Y-%m-%d')) {
met_HF <- read.csv (file = url ('http://harvardforest.fas.harvard.edu/sites/harvardforest.fas.harvard.edu/files/weather/qfm.csv'))
}
met_HF$TIMESTAMP <- as.POSIXct (met_HF$datetime,
format = '%Y-%m-%dT%H:%M',
tz = 'EST')
#Loop through each measurement in the session
#--------------------------------------------------------------------------------------#
#pdf("InitialRespiration.pdf")
for (ifile in  1:nrow(sessiondata)){ #the curly bracket starts the loop
#assign each of the files to a general variable "currentfile"
currentfile<-sessiondata$file[ifile]
# read in the data file, and assign it to another generable variable "measurement"
measurement<- read.csv(file = currentfile, header = TRUE, dec = ".")
dat <- selectData (ds= measurement,
lowerBound = lowerbound[ifile],
upperBound = upperbound[ifile])
title(main = paste("Soil Respiration:",'tree',sessiondata$tree[ifile],'chamber',sessiondata$chamber[ifile],sessiondata$timestamp[ifile]))
# to determine which weather measurements to use, we'll find 15 minute interval (consecutive; 12:29 = 12:30, 12:31=12:45)
next_interval <- as.POSIXct (x = (round (as.numeric (median (sessiondata$timestamp [ifile]))/
(15 * 60)) * (15 * 60) + (15 * 60)), format = '%Y-%m-%d %H:%M:%S',
origin = as.POSIXct ("1970-01-01", format = '%Y-%m-%d', tz = 'UTC'),
tz = 'EST')
fluxdata=list()
sessiondata$flux<-NA
sessiondata$sdFlux<-NA
sessiondata$ea.Pa   <- NA   # add actual water vapour pressure [Pa] to alldata data.frame (blank columns)
sessiondata$airt.C  <- NA   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa <- NA   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt <- NA   # add actual water vapour pressure [ppt] to alldata data.frame
pres.Pa <- met_HF$bar  [met_HF$TIMESTAMP == next_interval] * 100.0 # Pa
airt.C  <- met_HF$airt [met_HF$TIMESTAMP == next_interval]         # deg C
rh.per  <- met_HF$rh   [met_HF$TIMESTAMP == next_interval]         # %
# Calculate saturation water vapour pressure (esat) to convert relative humidity
es.Pa <- 0.61078 * exp ((17.269 * airt.C) / (237.3 + airt.C)) * 1000 # saturated water pressure [Pa]
ea.Pa <- es.Pa * rh.per / 100.0                                         # get actual water vapour pressure [Pa]
dat$ea.Pa   <- rep (ea.Pa,   length (dat [, 1]))   # add actual water vapour pressure [Pa] to sessiondata data.frame
dat$airt.C  <- rep (airt.C,  length (dat [, 1]))   # add air temperature [degC] to sessiondata data.frame
dat$pres.Pa <- rep (pres.Pa, length (dat [, 1]))   # add atmospheric pressure [Pa] to aalldat data.frame
dat$H2O.ppt <- dat$ea.Pa / (dat$pres.Pa - dat$ea.Pa) * 1.0e3   # add actual water vapour pressure [ppt] to sessiondata data.frame
names(dat)[which(names(dat)=="CO2")]<-"CO2.ppm"
# Correct CO2 concentration for water vapour
dat$CO2.dry <- corrConcDilution (dat,
colConc   = 'CO2.ppm',
colVapour = 'H2O.ppt')
# Calculate chamber flux for entire timeseries
resFit <- calcClosedChamberFlux (dat,
colConc     = 'CO2.dry',
colTime     = 'RunTime', # redundant
colTemp     = 'airt.C',
colPressure = 'pres.Pa',
volume      = dimensions$vol_m3[ifile],
area        = dimensions$respArea_m2[ifile])
fluxdata[[ifile]]<-resFit
sessiondata$flux[ifile]<-resFit$flux
sessiondata$sdFlux[ifile]<-resFit$sdFlux
sessiondata$ea.Pa[ifile]   <- ea.Pa   # add actual water vapour pressure [Pa] to alldata data.frame
sessiondata$airt.C[ifile]  <- airt.C   # add air temperature [degC] to alldata data.frame
sessiondata$pres.Pa[ifile] <- pres.Pa   # add atmospheric pressure [Pa] to aalldat data.frame
sessiondata$H2O.ppt[ifile] <- ea.Pa / (pres.Pa - ea.Pa) * 1.0e3
}
#dev.off()
#flux units are micromol/sec. can use conver_mmol function to get grams/day
